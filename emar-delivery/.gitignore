# EMAR Delivery Management System
## شركة إعمار لتوصيل الطلبات

[![Python](https://img.shields.io/badge/Python-3.8+-blue.svg)](https://python.org)
[![Flask](https://img.shields.io/badge/Flask-3.0.0-green.svg)](https://flask.palletsprojects.com/)
[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)

A comprehensive, enterprise-grade delivery management system designed specifically for Emar Delivery Company. This system provides complete management capabilities for drivers, vehicles, orders, payroll, documents, and maintenance operations with full Arabic language support.

## 🌟 Key Features

### Core Management Modules
- **👥 Driver Management** - Complete driver profiles, documentation, and performance tracking
- **🚗 Vehicle Management** - Fleet tracking, maintenance schedules, and vehicle assignments
- **📦 Order Management** - Order processing, tracking, and delivery management
- **💰 Payroll System** - Automated salary calculations, advances, and commission management
- **📄 Document Management** - Secure document storage with preview, download, and categorization
- **🔧 Maintenance Tracking** - Preventive maintenance scheduling and breakdown management
- **📊 Commission Calculations** - Flexible commission rules and automated calculations

### Advanced Features
- **🔐 Multi-level Authentication** - Role-based access control with admin and user levels
- **📱 Responsive Design** - Mobile-friendly interface for on-the-go management
- **🌐 Arabic Language Support** - Full RTL support with Arabic interface
- **📈 Analytics & Reporting** - Comprehensive reports and data export capabilities
- **🔒 Security Features** - CSRF protection, rate limiting, and secure file uploads
- **💾 Data Backup** - Automated backup system with data integrity checks
- **📋 Event Logging** - Complete audit trail for all system operations

#### 📦 إدارة الطلبات
- إنشاء وتتبع الطلبات
- حساب العمولات التلقائي
- إدارة حالات الطلبات
- ربط الطلبات بالسائقين والعملاء

#### 💰 النظام المالي
- إدارة السُلف والمديونيات
- حساب الرواتب التلقائي
- خصم السُلف من الرواتب
- تتبع الأرصدة والحدود

#### 🔧 إدارة الصيانة
- جدولة الصيانة الدورية
- تتبع تكاليف الصيانة
- تنبيهات الصيانة المستحقة
- سجل الصيانة الكامل

#### 📊 التقارير والإحصائيات
- تقارير السائقين المفصلة
- التقارير المالية
- تقارير الصيانة
- تصدير البيانات (CSV/Excel)

### 🛠️ التقنيات المستخدمة

- **Backend**: Python Flask
- **Frontend**: HTML5, CSS3, JavaScript (ES6+)
- **UI Framework**: Bootstrap 5 RTL
- **Icons**: Font Awesome
- **Fonts**: Tajawal (Google Fonts)
- **Data Storage**: JSON Files
- **Authentication**: Session-based

### 📁 هيكل المشروع

```
emar-delivery/
├── app.py                 # تطبيق Flask الرئيسي
├── requirements.txt       # متطلبات Python
├── README.md             # هذا الملف
├── data/                 # ملفات البيانات JSON
│   ├── config.json
│   ├── drivers.json
│   ├── vehicles.json
│   ├── clients.json
│   ├── orders.json
│   ├── advances.json
│   ├── payroll_runs.json
│   └── maintenance_schedules.json
├── static/               # الملفات الثابتة
│   ├── css/
│   │   └── style.css
│   └── js/
│       ├── app.js
│       ├── api.js
│       ├── utils.js
│       └── components/
│           ├── DataTable.js
│           └── FormModal.js
├── templates/            # قوالب HTML
│   └── index.html
├── utils/                # أدوات مساعدة
│   ├── json_store.py
│   ├── commissions.py
│   └── payroll.py
└── exports/              # ملفات التصدير
```

### 🚀 التثبيت والتشغيل

#### المتطلبات
- Python 3.8 أو أحدث
- pip (مدير حزم Python)

#### خطوات التثبيت

1. **استنساخ المشروع**
```bash
git clone [repository-url]
cd emar-delivery
```

2. **إنشاء بيئة افتراضية (اختياري)**
```bash
python -m venv venv
# Windows
venv\Scripts\activate
# Linux/Mac
source venv/bin/activate
```

3. **تثبيت المتطلبات**
```bash
pip install -r requirements.txt
```

4. **تشغيل التطبيق**
```bash
python app.py
```

5. **فتح المتصفح**
```
http://localhost:5000
```

### 🔐 بيانات الدخول الافتراضية

- **اسم المستخدم**: admin
- **كلمة المرور**: @Xx123456789xX@

### 📖 دليل الاستخدام

#### 1. لوحة التحكم
- عرض الإحصائيات الشهرية
- مراقبة الطلبات والرواتب
- تنبيهات الصيانة المستحقة

#### 2. إدارة السائقين
- إضافة سائق جديد من زر "إضافة جديد"
- تعديل بيانات السائق بالنقر على "تعديل"
- تحديد نوع التوظيف وإعدادات العمولة
- ضبط حدود السُلف وطريقة الخصم

#### 3. إدارة الطلبات
- إنشاء طلب جديد مع اختيار السائق والعميل
- تحديد عناوين الاستلام والتسليم
- متابعة حالة الطلب (في الانتظار، قيد التنفيذ، مكتمل)
- عرض العمولة المحسوبة تلقائياً

#### 4. النظام المالي
- إدارة السُلف: إضافة سُلفة جديدة للسائق
- حساب الرواتب: اختيار الشهر والسنة وحساب الرواتب
- اعتماد الرواتب ومعالجة خصم السُلف
- إغلاق دفعة الرواتب

#### 5. الصيانة
- جدولة صيانة دورية للسيارات
- تتبع تواريخ الاستحقاق
- إدارة تكاليف الصيانة
- عرض التنبيهات

### 🔧 الإعدادات

#### ملف config.json
```json
{
  "app_name": "شركة إعمار لتوصيل الطلبات",
  "currency": "KWD",
  "global_commission_per_order": 0.250,
  "admin": {
    "username": "admin",
    "password": "@Xx123456789xX@"
  },
  "settings": {
    "default_advance_limit": 500,
    "default_commission_per_order": 0.300,
    "payroll_approval_required": true,
    "maintenance_alert_days": 30
  }
}
```

### 💡 نصائح الاستخدام

1. **النسخ الاحتياطي**: انسخ مجلد `data/` بانتظام
2. **الأمان**: غيّر كلمة مرور المدير الافتراضية
3. **الصيانة**: راجع تنبيهات الصيانة أسبوعياً
4. **الرواتب**: اعتمد الرواتب قبل معالجة الخصومات
5. **التقارير**: استخدم التقارير لمراجعة الأداء الشهري

### 🐛 استكشاف الأخطاء

#### مشاكل شائعة:

**خطأ في تحميل البيانات**
- تأكد من وجود ملفات JSON في مجلد `data/`
- تحقق من صحة تنسيق JSON

**خطأ في حساب العمولات**
- تأكد من وجود بيانات السائق والعميل
- راجع إعدادات العمولة

**مشاكل في الواجهة**
- امسح ذاكرة التخزين المؤقت للمتصفح
- تأكد من تحميل ملفات CSS و JavaScript

### 📞 الدعم الفني

للحصول على المساعدة أو الإبلاغ عن مشاكل:
- راجع ملف الأخطاء في وحدة التحكم
- تحقق من سجلات الخادم
- تأكد من تحديث المتطلبات

### 📄 الترخيص

هذا المشروع مطور خصيصاً لشركة إعمار للتوصيل.

### 🔄 التحديثات المستقبلية

## 🚀 Deployment

### Development Deployment

```bash
# Start development server
python app.py
```

The application will be available at `http://localhost:5000`

### Production Deployment

#### Using Gunicorn (Recommended)

1. **Install Gunicorn**
   ```bash
pip install gunicorn
```

2. **Create Gunicorn configuration**
   ```python
# gunicorn.conf.py
   bind = "0.0.0.0:5000"
   workers = 4
   worker_class = "sync"
   worker_connections = 1000
   timeout = 30
   keepalive = 2
   max_requests = 1000
   max_requests_jitter = 100
   preload_app = True
```

3. **Start with Gunicorn**
   ```bash
gunicorn --config gunicorn.conf.py app:app
```

#### Using Docker

1. **Create Dockerfile**
   ```dockerfile
FROM python:3.9-slim
   WORKDIR /app
   COPY requirements.txt .
   RUN pip install -r requirements.txt
   COPY . .
   EXPOSE 5000
   CMD ["gunicorn", "--bind", "0.0.0.0:5000", "app:app"]
```

2. **Build and run**
   ```bash
docker build -t emar-delivery .
   docker run -p 5000:5000 emar-delivery
```

## 🔒 Security Considerations

### Authentication & Authorization
- Multi-level user authentication system
- Role-based access control (Admin, Manager, User)
- Session management with automatic timeout
- Password hashing using bcrypt

### Data Protection
- CSRF protection on all forms
- Rate limiting to prevent abuse
- Secure file upload with type validation
- Input sanitization and validation
- SQL injection prevention (using parameterized queries)

### File Security
- Secure filename handling
- File type validation
- Size limitations
- Virus scanning (recommended for production)
- Secure upload directory configuration

### Network Security
- HTTPS enforcement in production
- Security headers (CSP, HSTS, etc.)
- CORS configuration
- Request size limitations

## 📊 Usage Guide

### Initial Setup

1. **First Login**
   - Use default credentials: `admin` / `admin123`
   - Change password immediately after first login

2. **System Configuration**
   - Configure company information
   - Set up commission rules
   - Define user roles and permissions

3. **Data Import**
   - Import existing driver data
   - Add vehicle information
   - Set up client database

### Daily Operations

1. **Driver Management**
   - Add new drivers with complete profiles
   - Upload required documents (license, ID, etc.)
   - Track driver performance and status

2. **Order Processing**
   - Create new delivery orders
   - Assign orders to drivers
   - Track order status and completion

3. **Payroll Management**
   - Process monthly payroll
   - Calculate commissions automatically
   - Generate salary reports

## 🛠️ Maintenance & Backup

### Regular Maintenance

1. **Daily Tasks**
   - Monitor system logs
   - Check disk space
   - Verify backup completion

2. **Weekly Tasks**
   - Review security logs
   - Update system dependencies
   - Performance monitoring

3. **Monthly Tasks**
   - Full system backup
   - Security audit
   - Performance optimization

### Backup Procedures

1. **Automatic Backups**
   ```bash
# Set up cron job for daily backups
   0 2 * * * /path/to/backup_script.sh
```

2. **Manual Backup**
   ```bash
# Backup data directory
   tar -czf backup_$(date +%Y%m%d).tar.gz data/

   # Backup uploads
   tar -czf uploads_backup_$(date +%Y%m%d).tar.gz uploads/
```

3. **Restore Procedures**
   ```bash
# Restore data
   tar -xzf backup_YYYYMMDD.tar.gz

   # Restart application
   systemctl restart emar-delivery
```

## 🤝 Contributing

We welcome contributions to improve the EMAR Delivery Management System!

### Development Setup

1. **Fork the repository**
2. **Create a feature branch**
   ```bash
git checkout -b feature/your-feature-name
```

3. **Make your changes**
4. **Run tests**
   ```bash
python -m pytest tests/
```

5. **Submit a pull request**

### Coding Standards

- Follow PEP 8 for Python code
- Use meaningful variable and function names
- Add comments for complex logic
- Write unit tests for new features
- Update documentation as needed

### Bug Reports

When reporting bugs, please include:
- System information (OS, Python version)
- Steps to reproduce the issue
- Expected vs actual behavior
- Error messages or logs
- Screenshots if applicable

## 📞 Support

### Documentation
- **API Reference**: `/docs/API_REFERENCE.md`
- **User Manual**: `/docs/USER_MANUAL_AR.md` (Arabic)
- **Technical Documentation**: `/docs/TECHNICAL_DOCUMENTATION.md`

### Contact Information
- **Project Repository**: https://github.com/lolotam/EMAR-DELIVERY
- **Issues**: https://github.com/lolotam/EMAR-DELIVERY/issues
- **Email**: support@emar-delivery.com

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- Flask framework and its excellent ecosystem
- Bootstrap for responsive UI components
- Font Awesome for icons
- All contributors and testers

---

**شركة إعمار لتوصيل الطلبات** - Delivering Excellence, Managing Success
